@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:selector';
@use '../../styles/settings';
@use './variables' as *;

@mixin chip-sizes {
  @each $sizeName, $multiplier in settings.$size-scales {
    $size: map.get($chip-sizes, "font-size") + math.div(2 * $multiplier, 16);
    $height: map.get($chip-sizes, "height") + (6 * $multiplier);
    $padding: math.round(math.div($height, $chip-padding-ratio));

    .v-chip.v-chip--size-#{$sizeName} {
      --v-chip-size: #{$size};
      --v-chip-height: #{$height};
      font-size: $size;
      padding: 0 $padding;

      .v-chip__filter,
      .v-chip__prepend,
      .v-icon--start {
        margin-inline-start: -$padding * .5;
        margin-inline-end: $padding * .5;
      }

      .v-avatar--start {
        margin-inline-start: -$padding;
        margin-inline-end: $padding * .5;
      }

      .v-avatar--end {
        margin-inline-start: $padding * .5;
        margin-inline-end: -$padding;
      }

      .v-chip__append,
      .v-chip__close,
      .v-icon--end {
        margin-inline-start: $padding * .5;
        margin-inline-end: -$padding * .5;
      }
    }
  }
}

@mixin chip-density($properties, $densities) {
  @each $density, $multiplier in $densities {
    $value: calc(var(--v-chip-height) + #{$multiplier * settings.$spacer});

    &.v-chip--density-#{$density} {
      @if meta.type-of($properties) == "list" {
        @each $property in $properties {
          #{$property}: $value;
        }
      } @else {
        #{$properties}: $value;
      }

      .v-avatar {
        --v-avatar-height: #{$value};
      }
    }
  }
}
